@use "sass:math";

@import "./palette.scss";
@import "./variables.scss";
@import "./fontface.scss";
@import "./mixin.scss";
@import "./common.scss";

/* display options */
.d-inline {
  display: inline;
}
.d-inline-block {
  display: inline-block;
}
.d-block {
  display: block;
}
.d-inline-flex {
  display: inline-flex;
}
.d-flex {
  display: flex;
}
.d-none {
  display: none;
}

[hidden] {
  display: none !important;
}

.overflow-none {
  @include overflow-none;
}
.overflow-x-none {
  @include overflow-x-none;
}
.overflow-y-none {
  @include overflow-y-none;
}
.overflow-auto {
  @include overflow-auto;
}
.overflow-y-auto {
  @include overflow-y-auto;
}
.overflow-x-auto {
  @include overflow-x-auto;
}

.flex-0 {
  @include flex-0;
}
.flex-1 {
  @include flex-1;
}
.flex-auto {
  @include flex-auto;
}
.flex-0-1-100 {
  @include flex-0-1(100%);
}
.flex-1-1-100 {
  @include flex-1-1(100%);
}
.flex-1-0-100 {
  @include flex-1-0(100%);
}
.flex-0-0-100 {
  @include flex-0-0(100%);
}
@for $step from $start to 101 {
  .flex-0-1-#{$step} {
    @include flex-val(0, 1, #{$step}+ "%");
  }
  .flex-1-0-#{$step} {
    @include flex-val(1, 0, #{$step}+ "%");
  }
  .flex-1-1-#{$step} {
    @include flex-val(1, 1, #{$step}+ "%");
  }
  .flex-0-0-#{$step} {
    @include flex-val(0, 0, #{$step}+ "%");
  }
}
.flex-0-1-inherit {
  flex: 0 1 inherit;
}
.flex-0-0-inherit {
  flex: 0 0 inherit;
}
.flex-1-0-inherit {
  flex: 1 0 inherit;
}
.flex-1-1-inherit {
  flex: 1 1 inherit;
}
.flex-0-1-auto {
  flex: 0 1 auto;
}
.flex-0-0-auto {
  flex: 0 0 auto;
}
.flex-1-0-auto {
  flex: 1 0 auto;
}
.flex-1-1-auto {
  flex: 1 1 auto;
}

.flex-wrap {
  flex-wrap: wrap;
}
.flex-nowrap {
  flex-wrap: nowrap;
}

.flex-row {
  @include flex-direction-row;
}
.flex-column {
  @include flex-direction-column;
}
.justify-content-start {
  @include justify-content-start;
}
.justify-content-end {
  @include justify-content-end;
}
.justify-content-#{$center} {
  @include justify-content-center;
}
.justify-content-between {
  @include justify-content-between;
}
.align-items-start {
  @include align-items-start;
}
.align-items-end {
  @include align-items-end;
}
.align-items-#{$center} {
  @include align-items-center;
}

@media (min-width: 0px) {
  .flex-row-xs {
    @include flex-direction-row;
  }
  .flex-column-xs {
    @include flex-direction-column;
  }
  .justify-content-start-xs {
    @include justify-content-start;
  }
  .justify-content-end-xs {
    @include justify-content-end;
  }
  .justify-content--xs#{$center}-xs {
    @include justify-content-center;
  }
  .justify-content-between-xs {
    @include justify-content-between;
  }
  .align-items-start-xs {
    @include align-items-start;
  }
  .align-items-end-xs {
    @include align-items-end;
  }
  .align-items-#{$center}-xs {
    @include align-items-center;
  }
}

@media (min-width: 376px) {
  .flex-row-sm {
    @include flex-direction-row;
  }
  .flex-column-sm {
    @include flex-direction-column;
  }
  .justify-content-start-sm {
    @include justify-content-start;
  }
  .justify-content-end-sm {
    @include justify-content-end;
  }
  .justify-content--sm#{$center}-sm {
    @include justify-content-center;
  }
  .justify-content-between-sm {
    @include justify-content-between;
  }
  .align-items-start-sm {
    @include align-items-start;
  }
  .align-items-end-sm {
    @include align-items-end;
  }
  .align-items-#{$center}-sm {
    @include align-items-center;
  }
}
@media (min-width: 768px) {
  .flex-row-md {
    @include flex-direction-row;
  }
  .flex-column-md {
    @include flex-direction-column;
  }
  .justify-content-start-md {
    @include justify-content-start;
  }
  .justify-content-end-md {
    @include justify-content-end;
  }
  .justify-content--md#{$center}-md {
    @include justify-content-center;
  }
  .justify-content-between-md {
    @include justify-content-between;
  }
  .align-items-start-md {
    @include align-items-start;
  }
  .align-items-end-md {
    @include align-items-end;
  }
  .align-items-#{$center}-md {
    @include align-items-center;
  }
}
@media (min-width: 1024px) {
  .flex-row-lg {
    @include flex-direction-row;
  }
  .flex-column-lg {
    @include flex-direction-column;
  }
  .justify-content-start-lg {
    @include justify-content-start;
  }
  .justify-content-end-lg {
    @include justify-content-end;
  }
  .justify-content--lg#{$center}-lg {
    @include justify-content-center;
  }
  .justify-content-between-lg {
    @include justify-content-between;
  }
  .align-items-start-lg {
    @include align-items-start;
  }
  .align-items-end-lg {
    @include align-items-end;
  }
  .align-items-#{$center}-lg {
    @include align-items-center;
  }
}
@media (min-width: 1280px) {
  .flex-row-xl {
    @include flex-direction-row;
  }
  .flex-column-xl {
    @include flex-direction-column;
  }
  .justify-content-start-xl {
    @include justify-content-start;
  }
  .justify-content-end-xl {
    @include justify-content-end;
  }
  .justify-content--xl#{$center}-xl {
    @include justify-content-center;
  }
  .justify-content-between-xl {
    @include justify-content-between;
  }
  .align-items-start-xl {
    @include align-items-start;
  }
  .align-items-end-xl {
    @include align-items-end;
  }
  .align-items-#{$center}-xl {
    @include align-items-center;
  }
}

@for $step from $start to $limit {
  .divider#{"-#{$step}"} {
    @include my(#{$step} + "rem");
    @include transition(150ms, ease-in-out);
  }
}

.list {
  position: relative;
  // --lits-gap: 0.5rem;
  flex: 1;
  // gap: var(--lits-gap, 0px);
  @include transition(500ms, ease-in-out);

  &.list-open {
    padding-top: 1rem;
    overflow: hidden;
    max-height: 1000px;
  }
  &.list-close {
    padding-top: 1rem;
    overflow: hidden;
    max-height: 0px;
  }

  .list:not(:first-of-type) {
    @include ps(5rem);
  }

  & .list-item {
    font-weight: 200;
    font-size: calc(0.4rem + 0.5vw);
    text-decoration: none;
    display: flex;
    flex-wrap: wrap;
    // gap: 1rem;
    &:not(:last-of-type) {
      margin-bottom: 2rem;
    }

    &.dense {
      font-size: calc(0.3rem + 0.5vw);
      --list-gap: 0.4rem;
    }

    & .header {
      // flex:1;
      text-transform: capitalize;
      font-weight: 500;
      min-width: 5%;
    }
    & .body {
      // flex: 1;
      white-space: pre-wrap;
      word-break: break-all;
      text-align: right;
      & * {
        text-decoration: none;
      }
      & [href] {
        font-weight: 500;
        color: rgba($info-color, 1);
      }
    }
    &.list-item-noline {
      border-bottom-style: none !important;
    }

    &:not(:last-of-type) /* :is(& .body) */ {
      padding-bottom: var(--list-gap, 0.5rem);
      margin-bottom: var(--list-gap, 0.5rem);
      border-bottom: 1px solid rgba($gray-color, 0.25);
    }
  }
}

.gap-inherit {
  gap: inherit !important;
}
.list-gap-inherit {
  --list-gap: inherit !important;
}
@for $num from 0 to $limit {
  .gap-y-#{$num} {
    row-gap: #{$num}rem;
  }
  .gap-x-#{$num} {
    column-gap: #{$num}rem;
  }
  .gap-#{$num} {
    gap: #{$num}rem;
  }
  @include responsive("gap-#{$num}") {
    gap: #{$num}rem !important;
  }
  .list-gap-#{$num} {
    --list-gap: #{$num}rem;
  }
  @include responsive("list-gap-#{$num}") {
    --list-gap: #{$num}rem !important;
  }

  @media (min-width: 0px) {
    .gap-y-#{$num}-xs {
      row-gap: #{$num}rem;
    }
    .gap-x-#{$num}-xs {
      column-gap: #{$num}rem;
    }
    .gap-#{$num}-xs {
      gap: #{$num}rem;
    }
    @include responsive("gap-#{$num}-xs") {
      gap: #{$num}rem !important;
    }
    .list-gap-#{$num}-xs {
      --list-gap: #{$num}rem;
    }
    @include responsive("list-gap-#{$num}-xs") {
      --list-gap: #{$num}rem !important;
    }
  }

  @media (min-width: 376px) {
    .gap-y-#{$num}-sm {
      row-gap: #{$num}rem;
    }
    .gap-x-#{$num}-sm {
      column-gap: #{$num}rem;
    }
    .gap-#{$num}-sm {
      gap: #{$num}rem;
    }
    @include responsive("gap-#{$num}-sm") {
      gap: #{$num}rem !important;
    }
    .list-gap-#{$num}-sm {
      --list-gap: #{$num}rem;
    }
    @include responsive("list-gap-#{$num}-sm") {
      --list-gap: #{$num}rem !important;
    }
  }
  @media (min-width: 768px) {
    .gap-y-#{$num}-md {
      row-gap: #{$num}rem;
    }
    .gap-x-#{$num}-md {
      column-gap: #{$num}rem;
    }
    .gap-#{$num}-md {
      gap: #{$num}rem;
    }
    @include responsive("gap-#{$num}-md") {
      gap: #{$num}rem !important;
    }
    .list-gap-#{$num}-md {
      --list-gap: #{$num}rem;
    }
    @include responsive("list-gap-#{$num}-md") {
      --list-gap: #{$num}rem !important;
    }
  }
  @media (min-width: 1024px) {
    .gap-y-#{$num}-lg {
      row-gap: #{$num}rem;
    }
    .gap-x-#{$num}-lg {
      column-gap: #{$num}rem;
    }
    .gap-#{$num}-lg {
      gap: #{$num}rem;
    }
    @include responsive("gap-#{$num}-lg") {
      gap: #{$num}rem !important;
    }
    .list-gap-#{$num}-lg {
      --list-gap: #{$num}rem;
    }
    @include responsive("list-gap-#{$num}-lg") {
      --list-gap: #{$num}rem !important;
    }
  }
  @media (min-width: 1280px) {
    .gap-y-#{$num}-xl {
      row-gap: #{$num}rem;
    }
    .gap-x-#{$num}-xl {
      column-gap: #{$num}rem;
    }
    .gap-#{$num}-xl {
      gap: #{$num}rem;
    }
    @include responsive("gap-#{$num}-xl") {
      gap: #{$num}rem !important;
    }
    .list-gap-#{$num}-xl {
      --list-gap: #{$num}rem;
    }
    @include responsive("list-gap-#{$num}-xl") {
      --list-gap: #{$num}rem !important;
    }
  }
}

/* width, height options */
@for $num from $start to $limit {
  $temp: ($num - 1) * 25;
  .h-#{($num - 1) * 25} {
    @include height(#{($num - 1) * 25} + "%");
  }
  .w-#{($num - 1) * 25} {
    @include width(#{($num - 1) * 25} + "%");
  }
  .vh-#{($num - 1) * 25} {
    @include height(#{($num - 1) * 25} + "vh");
  }
  .vw-#{($num - 1) * 25} {
    @include width(#{($num - 1) * 25} + "vw");
  }

  .h-min-#{($num - 1) * 25} {
    @include min-height(#{($num - 1) * 25} + "%");
  }
  .w-min-#{($num - 1) * 25} {
    @include min-width(#{($num - 1) * 25} + "%");
  }
  .vh-min-#{($num - 1) * 25} {
    @include min-height(#{($num - 1) * 25} + "vh");
  }
  .vw-min-#{($num - 1) * 25} {
    @include min-width(#{($num - 1) * 25} + "vw");
  }

  .h-max-#{($num - 1) * 25} {
    @include max-height(#{($num - 1) * 25} + "%");
  }
  .w-max-#{($num - 1) * 25} {
    @include max-width(#{($num - 1) * 25} + "%");
  }
  .vh-max-#{($num - 1) * 25} {
    @include max-height(#{($num - 1) * 25} + "vh");
  }
  .vw-max-#{($num - 1) * 25} {
    @include max-width(#{($num - 1) * 25} + "vw");
  }
}

/* background color options */
@for $step from $start to $limit {
  $temp: ($step - 1) * 25;
  $opcaity: 1 - ($step - 1) * 25 * 0.01;

  .bg-primary#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $primary-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-secondary#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $secondary-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-info#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $info-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-success#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $success-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-warn#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $warn-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-error#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $error-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-black#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $black-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-gray#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $gray-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-white#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $white-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
}

// ################################
// ################################
// ##                            ##
// ##-----Text_Color_Options-----##
// ##                            ##
// ################################
// ################################

@for $step from $start to $limit {
  $temp: ($step - 1) * 25;
  $opcaity: 1 - ($step - 1) * 25 * 0.01;

  .text-primary#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba(
      $primary-color,
      var(--opacity, var(--text-opacity, #{$opcaity}))
    );
  }
  .text-secondary#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba(
      $secondary-color,
      var(--opacity, var(--text-opacity, #{$opcaity}))
    );
  }
  .text-info#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($info-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
  .text-success#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba(
      $success-color,
      var(--opacity, var(--text-opacity, #{$opcaity}))
    );
  }
  .text-warn#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($warn-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
  .text-error#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($error-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
  .text-black#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($black-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
  .text-gray#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($gray-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
  .text-white#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($white-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
}

.btn {
  cursor: pointer;
  border: none;
  color: $white-color;
  font-weight: 700;
  font-size: 1rem;
  @include py(2rem);
  @include px(2.8rem);
  @include border-radius(0.3rem);

  &:hover {
    filter: brightness(0.95);
    -webkit-filter: brightness(0.95);
  }
  &:active {
    filter: brightness(0.85);
    -webkit-filter: brightness(0.85);
  }
}

.tag {
  font-weight: 500;
  font-size: 0.65rem;
  @include py(0.75rem);
  @include px(1.5rem);
  @include border-radius(0.3rem);
}

.blockquote {
  font-weight: 300;
  border-left: 3px solid $gray-color;
  @include py(5rem);
  @include px(5rem);
  @include my(3rem);
}

@for $step from $start to $limit {
  .blockquote-#{$step} {
    border-left-width: #{$step + 3}px;
  }
}

.btn-small {
  font-size: 0.85rem;
}

.btn-outline {
  color: var(--color) !important;
  background: none !important;
  box-shadow: 0 0 0 1px;
}

@for $step from $start to $limit {
  $temp: ($step - 1) * 25;
  $opcaity: 1 - ($step - 1) * 25 * 0.01;

  .btn-primary#{if($temp == 0, "", "-#{$temp}")} {
    --color: #{$primary-color};
    --btn-opacity: #{$opcaity};
    color: $contrast-primary-color;
    background-color: rgba(
      $primary-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-secondary#{if($temp == 0, "", "-#{$temp}")} {
    --color: #{$secondary-color};
    --btn-opacity: #{$opcaity};
    color: $contrast-secondary-color;
    background-color: rgba(
      $secondary-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-info#{if($temp == 0, "", "-#{$temp}")} {
    --color: #{$info-color};
    --btn-opacity: #{$opcaity};
    color: $contrast-info-color;
    background-color: rgba(
      $info-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-success#{if($temp == 0, "", "-#{$temp}")} {
    --color: #{$success-color};
    --btn-opacity: #{$opcaity};
    color: $contrast-success-color;
    background-color: rgba(
      $success-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-warn#{if($temp == 0, "", "-#{$temp}")} {
    --color: #{$warn-color};
    --btn-opacity: #{$opcaity};
    color: $contrast-warn-color;
    background-color: rgba(
      $warn-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-error#{if($temp == 0, "", "-#{$temp}")} {
    --color: #{$error-color};
    --btn-opacity: #{$opcaity};
    color: $contrast-error-color;
    background-color: rgba(
      $error-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-black#{if($temp == 0, "", "-#{$temp}")} {
    --color: #{$black-color};
    --btn-opacity: #{$opcaity};
    color: $contrast-black-color;
    background-color: rgba(
      $black-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-gray#{if($temp == 0, "", "-#{$temp}")} {
    --color: #{$gray-color};
    --btn-opacity: #{$opcaity};
    color: $contrast-gray-color;
    background-color: rgba(
      $gray-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-white#{if($temp == 0, "", "-#{$temp}")} {
    --color: #{$white-color};
    --btn-opacity: #{$opcaity};
    color: $contrast-white-color;
    background-color: rgba(
      $white-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .tag-primary#{if($temp == 0, "", "-#{$temp}")} {
    --tag-opacity: #{$opcaity};
    color: $contrast-primary-color;
    background-color: rgba(
      $primary-color,
      var(--opacity, var(--tag-opacity, #{$opcaity}))
    );
  }
  .tag-secondary#{if($temp == 0, "", "-#{$temp}")} {
    --tag-opacity: #{$opcaity};
    color: $contrast-secondary-color;
    background-color: rgba(
      $secondary-color,
      var(--opacity, var(--tag-opacity, #{$opcaity}))
    );
  }
  .tag-info#{if($temp == 0, "", "-#{$temp}")} {
    --tag-opacity: #{$opcaity};
    color: $contrast-info-color;
    background-color: rgba(
      $info-color,
      var(--opacity, var(--tag-opacity, #{$opcaity}))
    );
  }
  .tag-success#{if($temp == 0, "", "-#{$temp}")} {
    --tag-opacity: #{$opcaity};
    color: $contrast-success-color;
    background-color: rgba(
      $success-color,
      var(--opacity, var(--tag-opacity, #{$opcaity}))
    );
  }
  .tag-warn#{if($temp == 0, "", "-#{$temp}")} {
    --tag-opacity: #{$opcaity};
    color: $contrast-warn-color;
    background-color: rgba(
      $warn-color,
      var(--opacity, var(--tag-opacity, #{$opcaity}))
    );
  }
  .tag-error#{if($temp == 0, "", "-#{$temp}")} {
    --tag-opacity: #{$opcaity};
    color: $contrast-error-color;
    background-color: rgba(
      $error-color,
      var(--opacity, var(--tag-opacity, #{$opcaity}))
    );
  }
  .tag-black#{if($temp == 0, "", "-#{$temp}")} {
    --tag-opacity: #{$opcaity};
    color: $contrast-black-color;
    background-color: rgba(
      $black-color,
      var(--opacity, var(--tag-opacity, #{$opcaity}))
    );
  }
  .tag-gray#{if($temp == 0, "", "-#{$temp}")} {
    --tag-opacity: #{$opcaity};
    color: $contrast-gray-color;
    background-color: rgba(
      $gray-color,
      var(--opacity, var(--tag-opacity, #{$opcaity}))
    );
  }
  .tag-white#{if($temp == 0, "", "-#{$temp}")} {
    --tag-opacity: #{$opcaity};
    color: $contrast-white-color;
    background-color: rgba(
      $white-color,
      var(--opacity, var(--tag-opacity, #{$opcaity}))
    );
  }
  .blockquote-primary#{if($temp == 0, "", "-#{$temp}")} {
    --blockquote-opacity: #{$opcaity};
    // color: $contrast-primary-color;
    border-left-color: rgba(
      $primary-color,
      var(--opacity, var(--blockquote-opacity, #{$opcaity}))
    );
    background-color: rgba(
      $primary-color,
      calc(var(--opacity, var(--blockquote-opacity, #{$opcaity})) * 0.1)
    );
  }
  .blockquote-secondary#{if($temp == 0, "", "-#{$temp}")} {
    --blockquote-opacity: #{$opcaity};
    // color: $contrast-secondary-color;
    border-left-color: rgba(
      $secondary-color,
      var(--opacity, var(--blockquote-opacity, #{$opcaity}))
    );
    background-color: rgba(
      $secondary-color,
      calc(var(--opacity, var(--blockquote-opacity, #{$opcaity})) * 0.1)
    );
  }
  .blockquote-info#{if($temp == 0, "", "-#{$temp}")} {
    --blockquote-opacity: #{$opcaity};
    // color: $contrast-info-color;
    border-left-color: rgba(
      $info-color,
      var(--opacity, var(--blockquote-opacity, #{$opcaity}))
    );
    background-color: rgba(
      $info-color,
      calc(var(--opacity, var(--blockquote-opacity, #{$opcaity})) * 0.1)
    );
  }
  .blockquote-success#{if($temp == 0, "", "-#{$temp}")} {
    --blockquote-opacity: #{$opcaity};
    // color: $contrast-success-color;
    border-left-color: rgba(
      $success-color,
      var(--opacity, var(--blockquote-opacity, #{$opcaity}))
    );
    background-color: rgba(
      $success-color,
      calc(var(--opacity, var(--blockquote-opacity, #{$opcaity})) * 0.1)
    );
  }
  .blockquote-warn#{if($temp == 0, "", "-#{$temp}")} {
    --blockquote-opacity: #{$opcaity};
    // color: $contrast-warn-color;
    border-left-color: rgba(
      $warn-color,
      var(--opacity, var(--blockquote-opacity, #{$opcaity}))
    );
    background-color: rgba(
      $warn-color,
      calc(var(--opacity, var(--blockquote-opacity, #{$opcaity})) * 0.1)
    );
  }
  .blockquote-error#{if($temp == 0, "", "-#{$temp}")} {
    --blockquote-opacity: #{$opcaity};
    // color: $contrast-error-color;
    border-left-color: rgba(
      $error-color,
      var(--opacity, var(--blockquote-opacity, #{$opcaity}))
    );
    background-color: rgba(
      $error-color,
      calc(var(--opacity, var(--blockquote-opacity, #{$opcaity})) * 0.1)
    );
  }
  .blockquote-black#{if($temp == 0, "", "-#{$temp}")} {
    --blockquote-opacity: #{$opcaity};
    // color: $contrast-black-color;
    border-left-color: rgba(
      $black-color,
      var(--opacity, var(--blockquote-opacity, #{$opcaity}))
    );
    background-color: rgba(
      $black-color,
      calc(var(--opacity, var(--blockquote-opacity, #{$opcaity})) * 0.1)
    );
  }
  .blockquote-gray#{if($temp == 0, "", "-#{$temp}")} {
    --blockquote-opacity: #{$opcaity};
    // color: $contrast-gray-color;
    border-left-color: rgba(
      $gray-color,
      var(--opacity, var(--blockquote-opacity, #{$opcaity}))
    );
    background-color: rgba(
      $gray-color,
      calc(var(--opacity, var(--blockquote-opacity, #{$opcaity})) * 0.1)
    );
  }
  .blockquote-white#{if($temp == 0, "", "-#{$temp}")} {
    --blockquote-opacity: #{$opcaity};
    // color: $contrast-white-color;
    border-left-color: rgba(
      $white-color,
      var(--opacity, var(--blockquote-opacity, #{$opcaity}))
    );
    background-color: rgba(
      $white-color,
      calc(var(--opacity, var(--blockquote-opacity, #{$opcaity})) * 0.1)
    );
  }
}

.emoji-color-primary {
  @include emoji-color($primary-color);
}
.emoji-color-secondary {
  @include emoji-color($secondary-color);
}
.emoji-color-info {
  @include emoji-color($info-color);
}
.emoji-color-success {
  @include emoji-color($success-color);
}
.emoji-color-warn {
  @include emoji-color($warn-color);
}
.emoji-color-error {
  @include emoji-color($error-color);
}
.emoji-color-black {
  @include emoji-color($black-color);
}
.emoji-color-gray {
  @include emoji-color($gray-color);
}
.emoji-color-white {
  @include emoji-color($white-color);
}

.card-list {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
}

.card {
  cursor: pointer;
  --card-opacity: 0.2;
  $height: 20rem;

  flex: 1 1 auto;

  @include p(1rem);
  @include border-radius(0.3rem);
  box-shadow: 0 0 1rem 0 rgba($black-color, var(--card-opacity, 1));
  position: relative;
  perspective: 3000px;

  & .wrap-word {
    @include p(2rem);
    display: flex;
    flex-direction: column;
    gap: 1rem;
    height: $height;
    min-height: $height;
    max-height: $height;
    background-color: $white-color;
    @include transition(150ms, ease-in-out);
    box-shadow: 1rem 0 0.5rem -0.5rem rgba($black-color, var(--card-opacity, 1));
    perspective-origin: 50%;
  }

  &::before {
    pointer-events: none;
    z-index: 101;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    color: $white-color;
    text-align: center;
    content: attr(data-title);
    @include p(1rem);
    @include transition(150ms, ease-in-out);
  }

  &:active {
    @keyframes active {
      0% {
        @include transform(scale(1));
      }
      100% {
        @include transform(scale(0.95));
      }
    }
    animation: active 50ms ease-in-out both;
    -webkit-animation: active 50ms ease-in-out both;
  }

  &::after {
    pointer-events: none;
    z-index: 100;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    content: "";
    background-image: var(--cover-path);
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    filter: brightness(0.55);
    -webkit-filter: brightness(0.55);

    @include transition(150ms, ease-in-out);
  }
  &:hover::before {
    opacity: 0;
  }
  &:hover .wrap-word {
    transform: rotate3d(0, -1, 0, -25deg) translate3d(-30%, 0, 0);
    -webkit-transform: rotate3d(0, -1, 0, -25deg) translate3d(-30%, 0, 0);
    -moz-transform: rotate3d(0, -1, 0, -25deg) translate3d(-30%, 0, 0);
    -ms-transform: rotate3d(0, -1, 0, -25deg) translate3d(-30%, 0, 0);
    -o-transform: rotate3d(0, -1, 0, -25deg) translate3d(-30%, 0, 0);
  }
  &:hover::after {
    box-shadow: -1rem 0 1rem -0.5rem rgba($black-color, 0.5);
    transform: rotate3d(0, -1, 0, 25deg) translate3d(30%, 0, 0);
    -webkit-transform: rotate3d(0, -1, 0, 25deg) translate3d(30%, 0, 0);
    -moz-transform: rotate3d(0, -1, 0, 25deg) translate3d(30%, 0, 0);
    -ms-transform: rotate3d(0, -1, 0, 25deg) translate3d(30%, 0, 0);
    -o-transform: rotate3d(0, -1, 0, 25deg) translate3d(30%, 0, 0);
  }
}

// ###############################################################
// ###############################################################
// ##                                                           ##
// ##　　　　　텍스트 배경색 투명도 우선 적용 위해 하단 작성　　　　　　　　##
// ##                                                           ##
// ###############################################################
// ###############################################################

@for $step from 0 to 101 {
  .opacity#{if($step == 0, "", "-#{$step}")} {
    --opacity: #{1 - $step * 0.01};
  }
}

@for $step from 0 to 101 {
  .text-opacity#{if($step == 0, "", "-#{$step}")} {
    --text-opacity: #{1 - $step * 0.01};
  }
}

@for $step from 0 to 101 {
  .bg-opacity#{if($step == 0, "", "-#{$step}")} {
    --bg-opacity: #{1 - $step * 0.01};
  }
}

.user-select-none {
  user-select: none;
}
.pointer-events-none {
  pointer-events: none;
}

.position-relative {
  position: relative;
}

.position-fixed {
  position: fixed;
}

.position-absolute {
  position: absolute;
}

.position-sticky {
  position: sticky;
}

.position-static {
  position: static;
}

@for $step from $start to $limit {
  $temp: ($step - 1) * 25;
  .top-#{$temp} {
    top: #{$temp} + "%";
  }
  .bottom-#{$temp} {
    bottom: #{$temp} + "%";
  }
  .left-#{$temp} {
    left: #{$temp} + "%";
  }
  .right-#{$temp} {
    right: #{$temp} + "%";
  }
}

.position-center {
  transform: translate(-50%, -50%);
  -webkit-transform: translate(-50%, -50%);
  -moz-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
  -o-transform: translate(-50%, -50%);
}

.position-x-center {
  transform: translateX(-50%);
  -webkit-transform: translateX(-50%);
  -moz-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  -o-transform: translateX(-50%);
}

.position-y-center {
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  -o-transform: translateY(-50%);
}

@for $step from $start to 101 {
  $temp: ($step - 1);
  $width: 100 - ($step - 1);

  .container#{if($temp == 0, "", "-#{$width}")} {
    width: #{$width} + "%";
    margin-left: auto;
    margin-right: auto;
    @include py(1rem);
  }
  @media (min-width: 0px) {
    .container#{if($temp == 0, "", "-#{$width}-xs")} {
      width: #{$width} + "%";
      margin-left: auto;
      margin-right: auto;
      @include py(1rem);
    }
  }
  @media (min-width: 376px) {
    .container#{if($temp == 0, "", "-#{$width}-sm")} {
      width: #{$width} + "%";
      margin-left: auto;
      margin-right: auto;
      @include py(1rem);
    }
  }
  @media (min-width: 768px) {
    .container#{if($temp == 0, "", "-#{$width}-md")} {
      width: #{$width} + "%";
      margin-left: auto;
      margin-right: auto;
      @include py(1rem);
    }
  }
  @media (min-width: 1024px) {
    .container#{if($temp == 0, "", "-#{$width}-lg")} {
      width: #{$width} + "%";
      margin-left: auto;
      margin-right: auto;
      @include py(1rem);
    }
  }
  @media (min-width: 1280px) {
    .container#{if($temp == 0, "", "-#{$width}-xl")} {
      width: #{$width} + "%";
      margin-left: auto;
      margin-right: auto;
      @include py(1rem);
    }
  }
}

[class^="container"] {
  img,
  video {
    max-width: 100%;
  }
}

.text-title-deco-end {
  --deco-radius: 0px;
  --deco-size: 8px;
  position: absolute;
  top: 50%;
  right: 0;
  background-color: rgba($gray-color, 0.95);
  width: var(--deco-size, 15px);
  height: var(--deco-size, 15px);
  @include border-radius(var(--deco-radius, 0px));
  @include transform(translateY(-50%));
}
.text-title-deco-circle {
  --deco-radius: 0.5rem;
}

.text-title-dash-start {
  &::before {
    content: "";
    flex: 1;
    vertical-align: middle;
    display: inline-block;
    width: 100%;
    height: 0px;
    border-bottom: 2px dashed #ccc;
    margin: 0 2% 0 -50%;
  }
}
.text-title-dash-both {
  &::before,
  &::after {
    content: "";
    flex: 1;
    vertical-align: middle;
    display: inline-block;
    width: 50%;
    height: 0px;
    border-bottom: 2px dashed #ccc;
    margin: 0 2% 0 -50%;
  }
  &::after {
    margin: 0 -50% 0 2%;
  }
}
.text-title-dash-end {
  &::after {
    content: "";
    flex: 1;
    vertical-align: middle;
    display: inline-block;
    width: 100%;
    height: 0px;
    border-bottom: 2px dashed #ccc;
    margin: 0 -50% 0 2%;
  }
}

@for $step from $start to $limit {
  $temp: $step;
  $size: 1 + ($step - 1) * 0.75 + 0.25;

  .text-title#{"-#{$temp}"} {
    // $shadow-size: 2px;
    position: relative;
    display: flex;
    overflow: hidden;
    font-weight: 700;
    // text-align: center;
    text-transform: uppercase;
    font-size: #{$size} + "rem";
    // -webkit-text-stroke: $shadow-size $white-color;
    @include mb(#{$size * 0.5} + "rem");

    & span:first-child {
      flex: 0 0 auto;
    }

    // align-items: center;
  }
}

[onclick] {
  transition: 150ms ease-in-out;
  -webkit-transition: 150ms ease-in-out;
  -moz-transition: 150ms ease-in-out;
  -ms-transition: 150ms ease-in-out;
  -o-transition: 150ms ease-in-out;
  &:hover {
    color: $primary-color;
  }
}

.profile-responsive {
  height: 200px;
  max-height: 40vw;
}

.aspect-ratio-16-9 {
  aspect-ratio: 16/9;
}
.aspect-ratio-9-16 {
  aspect-ratio: 9/16;
}

/* text options */
.f-bold {
  font-weight: $bold-size;
}

.f-normal {
  font-weight: $normal-size;
}

.f-small {
  font-weight: $small-size;
}

.text-uppercase {
  text-transform: uppercase;
}

.text-capitalize {
  text-transform: capitalize;
}

.text-lowercase {
  text-transform: lowercase;
}
.text-center {
  @include t-center;
}
.text-start {
  @include t-start;
}
.text-end {
  @include t-end;
}
.text-decoration-none {
  text-decoration: none;
}

.m-auto {
  @include my(auto);
  @include my(auto);
  @include my(auto);
  @include mx(auto);
}

@for $num from 0 to $limit {
  $temp: #{if($num == 0, 0, 1) + $num * 0.1 * $ratio} + "rem";
  .p-#{$num} {
    @include py($temp);
    @include py($temp);
    @include py($temp);
    @include px($temp);
  }
  .pt-#{$num} {
    @include pt($temp);
  }
  .ps-#{$num} {
    @include ps($temp);
  }
  .pe-#{$num} {
    @include pe($temp);
  }
  .pb-#{$num} {
    @include pb($temp);
  }
  .py-#{$num} {
    @include py($temp);
  }
  .px-#{$num} {
    @include px($temp);
  }
  .m-#{$num} {
    @include my($temp);
    @include my($temp);
    @include my($temp);
    @include mx($temp);
  }
  .mt-#{$num} {
    @include mt($temp);
  }
  .ms-#{$num} {
    @include ms($temp);
  }
  .me-#{$num} {
    @include me($temp);
  }
  .mb-#{$num} {
    @include mb($temp);
  }
  .my-#{$num} {
    @include my($temp);
  }
  .mx-#{$num} {
    @include mx($temp);
  }
}

.border {
  border-style: solid;
}

.border-solid {
  border-style: solid;
}
.border-dashed {
  border-style: dashed;
}

@for $step from $start to $limit {
  .border-line-#{$step} {
    border-width: #{$step} + "px";
  }
}

@for $step from $start to $limit {
  $temp: ($step - 1) * 25;
  $opacity: 1- $temp * 0.01;

  .border-primary#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($primary-color, var(--border-opacity, 1));
  }
  .border-secondary#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($secondary-color, var(--border-opacity, 1));
  }
  .border-info#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($info-color, var(--border-opacity, 1));
  }
  .border-success#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($success-color, var(--border-opacity, 1));
  }
  .border-warn#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($warn-color, var(--border-opacity, 1));
  }
  .border-error#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($error-color, var(--border-opacity, 1));
  }
  .border-black#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($black-color, var(--border-opacity, 1));
  }
  .border-gray#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($gray-color, var(--border-opacity, 1));
  }
  .border-white#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($white-color, var(--border-opacity, 1));
  }
}

@for $step from $start to 101 {
  $temp: 100 - $step;

  .border-opacity-#{$temp} {
    --border-opacity: $temp * 0.01;
  }
}

/* responsive 하단 배치 (우선 적용) */
@import "./responsive.scss";

.fs-inherit {
  font-size: inherit;
}
@for $step from 0 to 21 {
  .responsive-fs-width-#{$step} {
    --responsive-fs: #{$step}vw;
  }
  @include responsive("responsive-fs-width-#{$step}") {
    --responsive-fs: #{$step}vw !important;
  }
  .fs-#{$step} {
    font-size: calc(var(--responsive-fs, 0px) + #{1 + $step * 0.1}rem);
  }
  @include responsive("fs-inherit") {
    font-size: inherit !important;
  }
  @include responsive("fs-#{$step}") {
    font-size: calc(
      var(--responsive-fs, 0px) + #{1 + $step * 0.1}rem
    ) !important;
  }
}

.table {
  border-collapse: collapse;
  tr:not(:last-of-type) {
    border-bottom: 1px solid rgba($gray-color, 0.25);
  }
  td {
    padding: 0.5rem;
  }
}
