@use "sass:math";

@import "./palette.scss";
@import "./variables.scss";
@import "./fontface.scss";
@import "./mixin.scss";
@import "./common.scss";

.overflow-none {
  @include overflow-none;
}
.overflow-auto {
  @include overflow-auto;
}
.overflow-y-auto {
  @include overflow-y-auto;
}
.overflow-x-auto {
  @include overflow-x-auto;
}

/* display options */
.d-inline {
  @include d-inline;
}
.d-inline-block {
  @include d-inline-block;
}
.d-block {
  @include d-block;
}
.d-inline-flex {
  @include d-inline-flex;
}
.d-flex {
  @include d-flex;
}
.d-none {
  @include d-none;
}

.flex-1 {
  @include flex-1;
}
.flex-auto {
  @include flex-auto;
}
.flex-0-1-100 {
  @include flex-0-1-100;
}
.flex-1-1-100 {
  @include flex-1-1-100;
}
.flex-1-0-100 {
  @include flex-1-0-100;
}
.flex-0-0-100 {
  @include flex-0-0-100;
}
.flex-0-1-auto {
  flex: 0 1 auto;
}
.flex-0-0-auto {
  flex: 0 0 auto;
}
.flex-1-0-auto {
  flex: 1 0 auto;
}
.flex-1-1-auto {
  flex: 1 1 auto;
}

.flex-wrap {
  flex-wrap: wrap;
}
.flex-nowrap {
  flex-wrap: nowrap;
}

.flex-row {
  @include flex-direction-row;
}
.flex-column {
  @include flex-direction-column;
}
.justify-content-#{$center} {
  @include justify-content-center;
}
.justify-content-between {
  @include justify-content-between;
}
.align-items-#{$center} {
  @include align-items-center;
}
.align-items-start {
  @include align-items-start;
}

@for $step from $start to $limit {
  .divider#{"-#{$step}"} {
    @include my(#{$step} + "rem");
  }
}

@for $num from $start to $limit {
  .gap-#{$num} {
    gap: #{$num}rem;
  }
  .list-gap-#{$num} {
    --list-gap: #{$num}rem;
  }
}

/* width, height options */
@for $num from $start to $limit {
  $temp: ($num - 1) * 25;
  .h-#{($num - 1) * 25} {
    @include height(#{($num - 1) * 25} + "%");
  }
  .w-#{($num - 1) * 25} {
    @include width(#{($num - 1) * 25} + "%");
  }
  .vh-#{($num - 1) * 25} {
    @include height(#{($num - 1) * 25} + "vh");
  }
  .vw-#{($num - 1) * 25} {
    @include width(#{($num - 1) * 25} + "vw");
  }

  .h-min-#{($num - 1) * 25} {
    @include min-height(#{($num - 1) * 25} + "%");
  }
  .w-min-#{($num - 1) * 25} {
    @include min-width(#{($num - 1) * 25} + "%");
  }
  .vh-min-#{($num - 1) * 25} {
    @include min-height(#{($num - 1) * 25} + "vh");
  }
  .vw-min-#{($num - 1) * 25} {
    @include min-width(#{($num - 1) * 25} + "vw");
  }

  .h-max-#{($num - 1) * 25} {
    @include max-height(#{($num - 1) * 25} + "%");
  }
  .w-max-#{($num - 1) * 25} {
    @include max-width(#{($num - 1) * 25} + "%");
  }
  .vh-max-#{($num - 1) * 25} {
    @include max-height(#{($num - 1) * 25} + "vh");
  }
  .vw-max-#{($num - 1) * 25} {
    @include max-width(#{($num - 1) * 25} + "vw");
  }
}

@for $step from 0 to 21 {
  .responsive-fs-width-#{$step} {
    --responsive-fs: #{$step}vw;
  }
  .fs-#{$step} {
    font-size: calc(var(--responsive-fs, 0px) + #{1 + $step * 0.1}rem);
  }
}

/* background color options */
@for $step from $start to $limit {
  $temp: ($step - 1) * 25;
  $opcaity: 1 - ($step - 1) * 25 * 0.01;

  .bg-primary#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $primary-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-secondary#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $secondary-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-info#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $info-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-success#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $success-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-warn#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $warn-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-error#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $error-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-black#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $black-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-gray#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $gray-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
  .bg-white#{if($temp == 0, "", "-#{$temp}")} {
    --bg-opacity: #{$opcaity};
    background-color: rgba(
      $white-color,
      var(--opacity, var(--bg-opacity, #{$opcaity}))
    );
  }
}

// ################################
// ################################
// ##                            ##
// ##-----Text_Color_Options-----##
// ##                            ##
// ################################
// ################################

@for $step from $start to $limit {
  $temp: ($step - 1) * 25;
  $opcaity: 1 - ($step - 1) * 25 * 0.01;

  .text-primary#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba(
      $primary-color,
      var(--opacity, var(--text-opacity, #{$opcaity}))
    );
  }
  .text-secondary#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba(
      $secondary-color,
      var(--opacity, var(--text-opacity, #{$opcaity}))
    );
  }
  .text-info#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($info-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
  .text-success#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba(
      $success-color,
      var(--opacity, var(--text-opacity, #{$opcaity}))
    );
  }
  .text-warn#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($warn-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
  .text-error#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($error-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
  .text-black#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($black-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
  .text-gray#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($gray-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
  .text-white#{if($temp == 0, "", "-#{$temp}")} {
    --text-opacity: #{$opcaity};
    color: rgba($white-color, var(--opacity, var(--text-opacity, #{$opcaity})));
  }
}

.btn {
  border: none;
  color: $white-color;
  font-weight: 700;
  font-size: 1rem;
  @include py(0.5rem);
  @include px(1rem);
  @include border-radius(0.3rem);
}

@for $step from $start to $limit {
  $temp: ($step - 1) * 25;
  $opcaity: 1 - ($step - 1) * 25 * 0.01;

  .btn-primary#{if($temp == 0, "", "-#{$temp}")} {
    --btn-opacity: #{$opcaity};
    background-color: rgba(
      $primary-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-secondary#{if($temp == 0, "", "-#{$temp}")} {
    --btn-opacity: #{$opcaity};
    background-color: rgba(
      $secondary-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-info#{if($temp == 0, "", "-#{$temp}")} {
    --btn-opacity: #{$opcaity};
    background-color: rgba(
      $info-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-success#{if($temp == 0, "", "-#{$temp}")} {
    --btn-opacity: #{$opcaity};
    background-color: rgba(
      $success-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-warn#{if($temp == 0, "", "-#{$temp}")} {
    --btn-opacity: #{$opcaity};
    background-color: rgba(
      $warn-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-error#{if($temp == 0, "", "-#{$temp}")} {
    --btn-opacity: #{$opcaity};
    background-color: rgba(
      $error-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-black#{if($temp == 0, "", "-#{$temp}")} {
    --btn-opacity: #{$opcaity};
    background-color: rgba(
      $black-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-gray#{if($temp == 0, "", "-#{$temp}")} {
    --btn-opacity: #{$opcaity};
    background-color: rgba(
      $gray-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
  .btn-white#{if($temp == 0, "", "-#{$temp}")} {
    --btn-opacity: #{$opcaity};
    background-color: rgba(
      $white-color,
      var(--opacity, var(--btn-opacity, #{$opcaity}))
    );
  }
}

.emoji-color-primary {
  @include emoji-color($primary-color);
}
.emoji-color-secondary {
  @include emoji-color($secondary-color);
}
.emoji-color-info {
  @include emoji-color($info-color);
}
.emoji-color-success {
  @include emoji-color($success-color);
}
.emoji-color-warn {
  @include emoji-color($warn-color);
}
.emoji-color-error {
  @include emoji-color($error-color);
}
.emoji-color-black {
  @include emoji-color($black-color);
}
.emoji-color-gray {
  @include emoji-color($gray-color);
}
.emoji-color-white {
  @include emoji-color($white-color);
}

// ###############################################################
// ###############################################################
// ##                                                           ##
// ##　　　　　텍스트 배경색 투명도 우선 적용 위해 하단 작성　　　　　　　　##
// ##                                                           ##
// ###############################################################
// ###############################################################

@for $step from 0 to 101 {
  .opacity#{if($step == 0, "", "-#{$step}")} {
    --opacity: #{1 - $step * 0.01};
  }
}

@for $step from 0 to 101 {
  .text-opacity#{if($step == 0, "", "-#{$step}")} {
    --text-opacity: #{1 - $step * 0.01};
  }
}

@for $step from 0 to 101 {
  .bg-opacity#{if($step == 0, "", "-#{$step}")} {
    --bg-opacity: #{1 - $step * 0.01};
  }
}

.user-select-none {
  user-select: none;
}
.pointer-events-none {
  pointer-events: none;
}

.position-relative {
  position: relative;
}

.position-fixed {
  position: fixed;
}

.position-absolute {
  position: absolute;
}

.position-sticky {
  position: sticky;
}

.position-static {
  position: static;
}

@for $step from $start to $limit {
  $temp: ($step - 1) * 25;
  .top-#{$temp} {
    top: #{$temp} + "%";
  }
  .bottom-#{$temp} {
    bottom: #{$temp} + "%";
  }
  .left-#{$temp} {
    left: #{$temp} + "%";
  }
  .right-#{$temp} {
    right: #{$temp} + "%";
  }
}

.position-center {
  transform: translate(-50%, -50%);
  -webkit-transform: translate(-50%, -50%);
  -moz-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
  -o-transform: translate(-50%, -50%);
}

.position-x-center {
  transform: translateX(-50%);
  -webkit-transform: translateX(-50%);
  -moz-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  -o-transform: translateX(-50%);
}

.position-y-center {
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  -o-transform: translateY(-50%);
}

@for $step from $start to 101 {
  $temp: ($step - 1);
  $width: 100 - ($step - 1);

  .container#{if($temp == 0, "", "-#{$width}")} {
    width: #{$width} + "%";
    margin-left: auto;
    margin-right: auto;
    @include py(1rem);
  }
}

.text-title-deco-end {
  --deco-size: 10px;
  position: absolute;
  background-color: rgba($gray-color, 0.75);
  width: var(--deco-size, 15px);
  height: var(--deco-size, 15px);
  top: 50%;
  right: 0;
  z-index: 5;
  @include transform(translateY(-50%));
}

.text-title-dash-start {
  &::before {
    content: "";
    vertical-align: middle;
    display: inline-block;
    width: 100%;
    height: 1px;
    border-bottom: 2px dotted #ccc;
    margin: 0 2% 0 -55%;
    position: absolute;
    left: 0;
    z-index: -1;
    top: 50%;
    @include transform(translateY(-50%));
  }
}
.text-title-dash-both {
  &::before,
  &::after {
    content: "";
    vertical-align: middle;
    display: inline-block;
    width: 50%;
    height: 1px;
    border-bottom: 2px dotted #ccc;
    margin: 0 2% 0 -55%;
    position: absolute;
    left: 0;
    z-index: -1;
    top: 50%;
    @include transform(translateY(-50%));
  }
  &::after {
    margin: 0 -55% 0 2%;
  }
}
.text-title-dash-end {
  &::after {
    content: "";
    vertical-align: middle;
    display: inline-block;
    width: 100%;
    height: 1px;
    border-bottom: 2px dotted #ccc;
    position: absolute;
    left: 0;
    z-index: -1;
    top: 50%;
    @include transform(translateY(-50%));
  }
}

@for $step from $start to $limit {
  $temp: $step;
  $size: 1 + ($step - 1) * 0.75;

  .text-title#{"-#{$temp}"} {
    $shadow-size: 2px;
    position: relative;
    overflow: hidden;
    font-weight: 700;
    // text-align: center;
    text-transform: uppercase;
    font-size: #{$size} + "rem";
    // -webkit-text-stroke: $shadow-size $white-color;
    @include mb(#{$size * 0.5} + "rem");
  }
}

.profile-responsive {
  height: 200px;
  max-height: 40vw;
}

.aspect-ratio-16-9 {
  aspect-ratio: 16/9;
}
.aspect-ratio-9-16 {
  aspect-ratio: 9/16;
}

.list {
  // --lits-gap: 0.5rem;
  flex: 1;
  // gap: var(--lits-gap, 0px);

  & .list-item {
    font-weight: 200;
    font-size: calc(0.5rem + 0.5vw);
    text-decoration: none;
    display: flex;
    gap: 5rem;

    &.dense {
      font-size: calc(0.3rem + 0.5vw);
      --list-gap: 0.4rem;
    }

    & .header {
      text-transform: capitalize;
      font-weight: 700;
      min-width: 5%;
    }
    & .body {
      flex: 1;
      white-space: pre-wrap;
      word-break: break-all;
    }

    &:not(:last-of-type) /* :is(& .body) */ {
      padding-bottom: var(--list-gap, 0.5rem);
      margin-bottom: var(--list-gap, 0.5rem);
      border-bottom: 1px solid rgba($black-color, 0.55);
    }
  }
}

/* text options */
.f-bold {
  font-weight: $bold-size;
}

.f-normal {
  font-weight: $normal-size;
}

.f-small {
  font-weight: $small-size;
}

.text-uppercase {
  text-transform: uppercase;
}

.text-capitalize {
  text-transform: capitalize;
}

.text-lowercase {
  text-transform: lowercase;
}
.text-center {
  @include t-center;
}
.text-start {
  @include t-start;
}
.text-end {
  @include t-end;
}
.text-decoration-none {
  text-decoration: none;
}

@for $num from $start to $limit {
  .p-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include py($temp);
    @include py($temp);
    @include py($temp);
    @include px($temp);
  }
  .pt-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include pt($temp);
  }
  .ps-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include ps($temp);
  }
  .pe-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include pe($temp);
  }
  .pb-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include pb($temp);
  }
  .py-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include py($temp);
  }
  .px-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include px($temp);
  }
  .m-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include my($temp);
    @include my($temp);
    @include my($temp);
    @include mx($temp);
  }
  .mt-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include mt($temp);
  }
  .ms-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include ms($temp);
  }
  .me-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include me($temp);
  }
  .mb-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include mb($temp);
  }
  .my-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include my($temp);
  }
  .mx-#{$num} {
    $temp: #{1 + $num * 0.1 * $ratio} + "rem";
    @include mx($temp);
  }
}

.border {
  border-style: solid;
}

.border-solid {
  border-style: solid;
}
.border-dashed {
  border-style: dashed;
}

@for $step from $start to $limit {
  .border-line-#{$step} {
    border-width: #{$step} + "px";
  }
}

@for $step from $start to $limit {
  $temp: ($step - 1) * 25;
  $opacity: 1- $temp * 0.01;

  .border-primary#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($primary-color, var(--border-opacity, 1));
  }
  .border-secondary#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($secondary-color, var(--border-opacity, 1));
  }
  .border-info#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($info-color, var(--border-opacity, 1));
  }
  .border-success#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($success-color, var(--border-opacity, 1));
  }
  .border-warn#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($warn-color, var(--border-opacity, 1));
  }
  .border-error#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($error-color, var(--border-opacity, 1));
  }
  .border-black#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($black-color, var(--border-opacity, 1));
  }
  .border-gray#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($gray-color, var(--border-opacity, 1));
  }
  .border-white#{if($temp == 0, "", "-#{$temp}")} {
    --border-opacity: #{$opacity};
    border-color: rgba($white-color, var(--border-opacity, 1));
  }
}

@for $step from $start to 101 {
  $temp: 100 - $step;

  .border-opacity-#{$temp} {
    --border-opacity: $temp * 0.01;
  }
}

/* responsive 하단 배치 (우선 적용) */
@import "./responsive.scss";
